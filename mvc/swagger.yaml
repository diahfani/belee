openapi: 3.0.0
info:
  title: Belee
  description: Belee API Documentation
  version: 1.0.

tags:
  - name: Buyers
    description: Buyers Api
  - name: Owners
    description: Owners API
  - name: Transactions
    description: Transactions API
  - name: Products
    description: Products API
  - name: Products Type
    description: Products Type API
  - name: Warungs
    description: Warungs API
  - name: Payment Methods
    description: Payment Methods API
  - name: Transaction Items
    description: Transaction Items API

paths:
  # /auth/login:
  #   post:
  #     tags:
  #       - Auth
  #     summary: Endpoint for login users.
  #     description: Login user return token.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/Login"
  #     responses:
  #       "200": # status code
  #         description: A JSON array of usernames
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status_code:
  #                   type: integer
  #                   example: 200
  #                 message:
  #                   type: string
  #                   example: "OK"
  #                 data:
  #                   $ref: "#/components/schemas/JWT"
  #       "422": # status code
  #         description: Unproccessable entity
  # /auth/register:
  #   post:
  #     tags:
  #       - Auth
  #     summary: Endpoint for register users.
  #     description: Login user return token.
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/Login"
  #     responses:
  #       "200": # status code
  #         description: A JSON array of usernames
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 status_code:
  #                   type: integer
  #                   example: 200
  #                 message:
  #                   type: string
  #                   example: "OK"
  #                 data:
  #                   $ref: "#/components/schemas/JWT"
  #       "422": # status code
  #         description: Unproccessable entity

  #  registers buyers
  /buyers/registers:
    post:
      tags:
        - Buyers
      summary: Register buyers
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: diah
                age:
                  type: integer
                  example: 21
                nohp:
                  type: integer
                  example: 085790023450
                dob:
                  type: string
                  example: 2000-10-01
                email:
                  type: string
                  format: email
                  example: diahaufa@gmail.com
                password:
                  type: string
                  example: diah0987
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Buyers"

# login buyers 
  /buyers/login:
    post:
      tags:
        - Buyers
        - Login
      summary: Login buyers
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Login"
 
# get buyers list
  /buyers:
    get:
      tags:
        - Buyers
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Buyers"

# Get details buyers
  /buyers/id:
    get:
      tags:
        - buyers
      summary: Returns detail of user.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    address:
                      type: string

  #  registers owners
  /owners/registers:
    post:
      tags:
        - Buyers
        - Owners
      summary: Register buyers
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: diah
                age:
                  type: integer
                  example: 21
                nohp:
                  type: integer
                  example: 085790023450
                dob:
                  type: string
                  example: 2000-10-01
                email:
                  type: string
                  format: email
                  example: diahaufa@gmail.com
                password:
                  type: string
                  example: diah0987
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Owners"

# login owners 
  /owners/login:
    post:
      tags:
        - Owners
        - Login
      summary: Login owners
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Login"

# Get details buyers
  /buyers/id:
    get:
      tags:
        - buyers
      summary: Returns detail of user.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    address:
                      type: string

# add products
  /products/add:
    post:
      tags:
        - Products
      summary: Add new products
      description: |
        send some data for add products
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                warundId:
                  type: integer
                  example: 1
                productsTypeId:
                  type: integer
                  example: 1
                warungName:
                  type: string
                  example: toko hamida
                productsName:
                  type: string
                  example: milo
                qty:
                  type: integer
                  example: 100
                price:
                  type: number
                  example: 2500.0
                created_at:
                  type: string
                  format: date-time
                  example: 2021-08-09T12:02:57Z
                updated_at:
                  type: string
                  format: date-time
                  example: 2021-08-09T12:02:57Z
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"

# Get products by id
/products/id:
    get:
      tags:
        - products
      summary: Returns detail of user.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    address:
                      type: string


    put:
      tags:
        - User
      summary: Update data user
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  example: 1
                username:
                  type: string
                  example: ainurrahms
                password:
                  type: string
                  example: k!UUdja21Sxh
                city_id:
                  type: number
                  example: 1
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Users"
    delete:
      tags:
        - User
      summary: Delete user.
      description: |
        Send data for soft delete
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Users"

  /transactions:
    post:
      tags:
        - Transaction
      summary: Endpoint to create transaction.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                discount_id:
                  type: integer
                  example: 1
                price:
                  type: number
                  example: 100000.0
                products_id:
                  type: integer
                  example: 1
                total:
                  type: number
                  example: 100000.0
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Transactions"
    get:
      tags:
        - Transaction
      summary: Endpoint to get all transaction.
      description: Optional extended description in CommonMark or HTML.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/TransactionsUser"
  /transactions/id:
    get:
      tags:
        - Transaction
      summary: Endpoint to get one transaction.
      description: Optional extended description in CommonMark or HTML.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Transactions"

  /products:
    post:
      tags:
        - Products
      summary: Add new products
      description: |
        send some data for add products
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                  example: GALAX RTX 3090 4GB
                product_description:
                  type: string
                  example: Barang bagus , baru dipakai
                product_garansi:
                  type: string
                  example: Garansi OFF
                product_type_id:
                  type: integer
                  example: 1
                product_used_time_id:
                  type: integer
                  example: 1
                city_id:
                  type: number
                  example: 1
                status:
                  type: boolean
                  example: true
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"
    get:
      tags:
        - Products
      summary: Endpoint to get all products.
      description: Retrieve all products.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"
  /products/id:
    get:
      tags:
        - Products
      summary: Endpoint to get one products.
      description: Retrieve one products.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"
    put:
      tags:
        - Products
      summary: Update product
      description: |
        send some data for register
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                product_name:
                  type: string
                  example: GALAX RTX 3090 4GB
                product_description:
                  type: string
                  example: Barang bagus , baru dipakai
                product_garansi:
                  type: string
                  example: Garansi OFF
                product_type_id:
                  type: integer
                  example: 1
                product_used_time_id:
                  type: integer
                  example: 1
                city_id:
                  type: number
                  example: 1
                status:
                  type: boolean
                  example: true
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"

    delete:
      tags:
        - Products
      summary: Delete product.
      description: |
        Send data for soft delete
      responses:
        200:
          description: Delete one product
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Products"
  /products/types:
    post:
      tags:
        - Products Type
      summary: Endpoint to create product type.
      description: Master product type.
      requestBody:
        description: To add new product type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_type:
                  type: string
                  example: VGA
                product_merk:
                  type: string
                  example: ASUS
                product_code:
                  type: string
                  example: 123879AB1
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsType"
    get:
      tags:
        - Products Type
      summary: Endpoint to get all products type.
      description: Retrieve all products type.
      responses:
        200:
          description: A list of products type
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsType"
  /products/types/id:
    get:
      tags:
        - Products Type
      summary: Endpoint to get all products type.
      description: Retrieve all products type.
      responses:
        200:
          description: A list of products type
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsType"
    put:
      tags:
        - Products Type
      summary: Update product type
      description: |
        send some data for edit product type
      requestBody:
        description: Edit product type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                product_type:
                  type: string
                  example: VGA
                product_merk:
                  type: string
                  example: ASUS
                product_code:
                  type: string
                  example: 123879AB1
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsType"

    delete:
      tags:
        - Products Type
      summary: Delete product type.
      description: |
        Send data for soft delete
      responses:
        200:
          description: Delete one product type
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsType"
  /discounts:
    post:
      tags:
        - Discounts
      summary: Endpoint to create discounts.
      description: Master discounts.
      requestBody:
        description: To add new discounts
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 123AAVCX
                dicounts_value:
                  type: number
                  example: 1000.0
      responses:
        200:
          description: Return success of discount
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Discounts"
    get:
      tags:
        - Discounts
      summary: Endpoint to get all discounts.
      description: Retrieve all discounts.
      responses:
        200:
          description: A list of discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Discounts"
  /discounts/id:
    get:
      tags:
        - Discounts
      summary: Endpoint to get one of discount.
      description: Retrieve one discount.
      responses:
        200:
          description: Get one discount
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Discounts"
    put:
      tags:
        - Discounts
      summary: Update product type
      description: |
        send some data for edit product type
      requestBody:
        description: Edit product type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                code:
                  type: string
                  example: 123AAVCX
                dicounts_value:
                  type: number
                  example: 1000.0
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Discounts"

    delete:
      tags:
        - Discounts
      summary: Delete discounts.
      description: |
        Send data for soft delete
      responses:
        200:
          description: Delete one discounts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Discounts"
  /product/used:
    post:
      tags:
        - Product Used Times
      summary: Endpoint to create product used times.
      description: Master product used time.
      requestBody:
        description: To add new discounts
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                used_times:
                  type: string
                  example: 3 Tahun
      responses:
        200:
          description: Return success of product used time
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsUsedTime"
    get:
      tags:
        - Product Used Times
      summary: Endpoint to get all product used times.
      description: Retrieve all product used times.
      responses:
        200:
          description: A list of product used times
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsUsedTime"
  /product/used/id:
    get:
      tags:
        - Product Used Times
      summary: Endpoint to get one of product used times.
      description: Retrieve one product used times.
      responses:
        200:
          description: Get one product used times
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsUsedTime"
    put:
      tags:
        - Product Used Times
      summary: Update product used times
      description: |
        send some data for edit product used times
      requestBody:
        description: Edit product used times
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                used_times:
                  type: string
                  example: 3 Tahun
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsUsedTime"

    delete:
      tags:
        - Product Used Times
      summary: Delete product used times.
      description: |
        Send data for soft delete
      responses:
        200:
          description: Delete one product used times
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/ProductsUsedTime"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: QwanjjaseuQeq
    JWT:
      type: object
      required:
        - token
        - expire_token
        - refresh_token
        - expire_refresh_token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
        expire_token:
          type: string
          example: 2021-08-09T12:02:57Z
          format: date-time
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.|eyJleHAiOjE2Mjg1MTA1NzcsImp0aSI6ImV5SmhiR2NpT2l a7C6ZcazsgjdKXR2eXOPRzBhRv99NOaDMNN2gyYDE2Y
        expire_refresh_token:
          type: string
          example: 2021-08-09T12:02:57Z
          format: date-time

    Buyers:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: diah
        age:
          # harusnya int typenya
          type: string
          example: jhondoe
        nohp:
          # harusnya int typenya
          type: string
          example: 085890002456
        dob:
          # typenya harusnya date sih
          type: string 
          example: 2000-10-01
        address:
          type: string
          example: tokyo
        email:
          type: string
          example: diahaufa@gmail.com
        password:
          type : string
          example: 123
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
          
    Owners:
      type: object
      properties:
        id:
          type: integer
          example: 1
        warungID:
          type: int
          example: 1
        name:
          type: string
          example: diah
        age:
          # harusnya int typenya
          type: string
          example: 12
        nohp:
          # harusnya int typenya
          type: string
          example: 085890002456
        dob:
          # typenya harusnya date sih
          type: string 
          example: 2000-10-01
        address:
          type: string
          example: tokyo
        email:
          type: string
          example: diahaufa@gmail.com
        password:
          type : string
          example: 123
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z

    Warungs:
      type: object
      properties:
        id:
          type: integer
          example: 1
        # products:
        #   type: products.Products
        #   example: 
        ownersID:
          type: integer
          example: 1
        name:
          type: string
          example: toko hamida
        address:
          type: string
          example: bekasi
        ownersName:
          type: string
          example: sumiati
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z

    Products:
      type: object
      properties:
        id:
          type: integer
          example: 1
        warungID:
          type: integer
          example: 1
        barangTypeID:
          type: integer
          example: 1
        warungName:
          type: string
          example: toko hamida
        productsName:
          type: string
          example: milo
        qty:
          type: integer
          example: 100
        price:
          type: number
          example: 2500.0
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        updated_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z

    Transactions:
      type: object
      properties:
        id:
          type: integer
          example: 1
        warundID:
          type: integer
          example: 1
        paymentID:
          type: int
          example: 1
        productsName:
          type: string
          example: milo
        totalQty:
          type: integer
          example: 1
        totalPrice:
          type: number
          example: 2500.0
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
        status:
          type: enum['lunas', 'tidak lunas']
          example: lunas

    PaymentMethods:
      type: object
      properties:
        id:
          type: integer
          example: 1
        namePayment:
          type: string
          example: e-wallet

    ProductsType:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nameType:
          type: string
          example: minuman

    TransactionItems:
      type: object
      properties:
        transactionID:
          type: integer
          example: 1
        productsID:
          type: integer
          example: 1
        productsName:
          type: string
          example: milo@email.com
        totalQty:
          type: integer
          example: 1
        totalPrice:
          type: number
          example: 2500.0
        created_at:
          type: string
          format: date-time
          example: 2021-08-09T12:02:57Z
      
      Login:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
            example: diahaufa@gmail.com
          password:
            type: string
            example: diah0987

security:
  - bearerAuth: []