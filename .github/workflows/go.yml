name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

name: Running Unit Test, Build Docker Image,  Push To Docker Hub and Deploy To EC2

on:
  pull_request:
    branches:
      - 'main'
  push: 
    branches:
      - 'main'

jobs:
  unit-test:
    name: "unit test"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2  
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: running unit test
      run: go test ./... -cover

  build-push-docker:
    name: "Build image and push to registry"
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
    - uses: actions/checkout@v2
    - name: build docker
      run: docker build -t moryku/kampus_merdeka:1.0.0 .
    - name: login registry docker hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: push image to registry docker hub
      run: docker push moryku/kampus_merdeka:1.0.0
  
  deployment-ec2:
    name: "Deploy to ec2 from registry docker hub"
    runs-on: ubuntu-latest
    needs: build-push-docker
    steps:
      - uses: actions/checkout@v2 
      - name: configuration SSH
        env:
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/alterra_academy_aws.pem
          chmod 400 ~/.ssh/alterra_academy_aws.pem
          cat >>~/.ssh/config <<END
          Host development
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/alterra_academy_aws.pem
            StrictHostKeyChecking=no
          END
      - name: Connect EC2 & Remove All Container & Pull from Registry & Start
        run: ssh development 'docker rm -f $(docker ps -a -q) && docker pull moryku/kampus_merdeka:1.0.0 && docker run -d -p 8080:8080 --name kampus_merdeka moryku/kampus_merdeka:1.0.0'

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:

#     - name: Set up Go 1.12
#       uses: actions/setup-go@v2
#       with:
#         go-version: 1.17
    
#     - name: Debug
#       run: |
#         pwd
#         echo ${GOPATH}
#         echo ${GOROOT}
#     - name: Check out code into the Go module directory
#       uses: actions/checkout@v2
#       with:
#         fetch-depth: 1
#         path: go/src/github.com/diahfani/belee
#     - name: Debug
#       run: |
#         pwd
#         echo ${HOME}
#         echo ${GITHUB_WORKSPACE}
#         echo ${GOPATH}
#         echo ${GOROOT}
#       env:
#         GOPATH: /home/runner/work
    
#     - name: Test
#       run: |
#         go get -u golang.org/x/tools/cmd/cover
#         go get -u golang.org/x/net/context
#         go get -u golang.org/x/net/context/ctxhttp
#         go get -u github.com/golang/protobuf/proto
#         go mod init belee
#         go mod tidy
#         go test -cover $(go list ./... | grep -v /vendor/)
#       env:
#         GOPATH: /home/runner/work/
# jobs:
#   gopath:
#     runs-on: ubuntu-latest
#     env:
#       GOPATH: ${{ github.workspace }}
#       package: github.com/diahfani/belee # your package's preferred path
#     steps:
#       - uses: actions/setup-go@v2
#         with:
#           go-version: 1.17 # Change this to whatever you need
#       - uses: actions/checkout@v2
#         with:
#           path: src/belee
#       - name: Dependencies
#         run: go get -t -d -v ${{ env.package }}/...
#       - name: Build
#         run: go build ${{ env.package }}
#       - name: Test
#         run: go test -v ${{ env.package }}/...


  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Set up Go
  #     uses: actions/setup-go@v2
  #     with:
  #       go-version: 1.17

  #   - name: Build
  #     run: go build -v ./...

  #   - name: Test
  #     run: go test -v ./...
  #   - name: Setup Go environment
  #     uses: actions/setup-go@v2.1.4
